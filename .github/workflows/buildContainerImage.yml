name: Build Container Image

on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      refName:
        required: false
        type: string
        default: ${{ github.ref_name }}
      registry:
        description: "Container image registry, eg: 1234567789012.dkr.ecr.eu-central-1.amazonaws.com"
        default: "330817282416.dkr.ecr.eu-central-1.amazonaws.com"
        required: false
        type: string
      buildArgs:
        required: false
        description: "Build args, in case of multiple tags use string demlimited by \n eg: arg0=val1,val2\narg1=test1\narg2=test2"
        default: ""
        type: string
      dockerfilePath:
        required: false
        default: "."
        type: string
      exitOnScanFail:
        required: false
        description: "Flag to abort push to registry if security scan has CRITICAL flaws"
        default: 0
        type: string
      app:
        required: false
        type: string
        default: ${{github.event.repository.name}}
      chartRepo:
        required: false
        type: string
        default:  "dashboard-k8s"
    secrets:
      containerRegistryUser:
        required: true
      containerRegistryPassword:
        required: true
      sshKey:
        required: false
      secretBuildArgs:
        description: "Build args that should stay secret, in case of multiple tags use string delimited by \n eg: arg0=val1,val2\narg1=test1\narg2=test2"
        required: false
      githubToken:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !github.ref_protected }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch name
        id: validate
        run: |
          if [[ '${{ inputs.refName }}' =~ ^[0-9A-Za-z\-]*[^\-]$ ]]; then
            echo "::set-output name=valid::true"
          else
            echo 'Branch name should contain only - and alfa-numerics. Failing to do this will cause issues with k8s namespace and container image creation. Please refer to the documentation - https://kubernetes.io/docs/concepts/overview/working-with-objects/names/'
            echo "::set-output name=valid::false"
          fi

  setup:
    name: setup
    needs: validate
    runs-on: ubuntu-latest
    if: needs.validate.outputs.valid == 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: tag
        id: tag
        run: |
          tag=${{ github.ref_name }}-$(git rev-parse --short HEAD)
          namespace=$(echo ${{ github.ref_name }} | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=image_tag::${tag}"
          echo "::set-output name=namespace::${namespace}"

  buildScanPush:
    name: Build scan and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get SSH Key from secret
        id: ssh_key
        run: echo "::set-output name=ssh_key::${{ secrets.sshKey }}"

      - name: Setup SSH Auth Sock
        uses: webfactory/ssh-agent@v0.5.4
        if: ${{ steps.ssh_key.outputs.ssh_key }}
        with:
          ssh-private-key: ${{ secrets.sshKey }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Extract docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.registry }}/${{ inputs.imageName}}
          # Generate tags
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=raw,${{ steps.tag.outputs.image_tag }}\n${{ github.ref_name }}-latest
            type=ref,event=pr,suffix=-{{sha}}-{{date 'YYYYMMDDHHmm'}}
            type=ref,event=branch,suffix=-{{sha}}-{{date 'YYYYMMDDHHmm'}}
            type=ref,event=tag

      - name: Build locally before tests and scan (with ssh)
        uses: docker/build-push-action@v2
        if: ${{ env.SSH_AUTH_SOCK }}
        with:
          ssh: |
            "default=${{ env.SSH_AUTH_SOCK }}"
          context: ${{ inputs.dockerfilePath }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: "{{ secrets.secretBuildArgs}}\n{{ inputs.buildArgs }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build locally before tests and scan
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.dockerfilePath }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: "{{ secrets.secretBuildArgs}}\n{{ inputs.buildArgs }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - id: get-first-tag
        name: Get tag for scan
        run: |
          first_tag=$(echo "${{steps.meta.outputs.tags}}" | cut -d$'\n' -f1)
          echo "::set-output name=first_tag::$first_tag"

      # Trivy vulnerability scan
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-first-tag.outputs.first_tag }}
          format: "table"
          exit-code: ${{ inputs.exitOnScanFail }}
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Loging to container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.containerRegistryUser }}
          password: ${{ secrets.containerRegistryPassword }}

      - name: Build and push (with ssh)
        uses: docker/build-push-action@v2
        if: ${{ env.SSH_AUTH_SOCK }}
        with:
          ssh: |
            "default=${{ env.SSH_AUTH_SOCK }}"
          context: ${{ inputs.dockerfilePath }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: "{{ secrets.secretBuildArgs}}\n{{ inputs.buildArgs }}"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.dockerfilePath }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: "{{ secrets.secretBuildArgs}}\n{{ inputs.buildArgs }}"

  update-preview-chart:
    name: Preview chart update
    runs-on: ubuntu-latest
    steps:
      - name: Get and update ${{ inputs.chartRepo }} umbrella helm chart for mfe
        uses: actions/checkout@v3
        with:
          repository: adjust/${{ inputs.chartRepo }}
          token: ${{ secrets.githubToken }}
          submodules: recursive
          fetch-depth: 0
          ref: master
      - name: Update image and commit the changes to ${{ inputs.chartRepo }}
        run: |
          cd helm/mfe
          git config --global user.name "Github preview creation bot"
          git config --global user.email "<>"
          git checkout pr-${{ inputs.refName }} 2>/dev/null || git checkout -b pr-${{ inputs.refName }}
          if [[ $(yq '.${{ inputs.app }}.image.tag' values.yaml) != "${{ inputs.imageTag }}" ]]; then
            yq -i '.${{ inputs.app }}.image.tag = "${{ inputs.imageTag }}"' values.yaml
            git add values.yaml
            git commit -m "${{ inputs.app }}: Update images version in chart for commit ${{ github.sha }}" -a
            git push origin pr-${{ inputs.refName }}
          fi
