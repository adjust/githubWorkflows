name: Continuous Integration

on:
  workflow_call:
    inputs:
      nodeVersion:
        required: true
        type: string
      appFolder:
        required: true
        type: string
      appName:
        required: true
        type: string
      appPath:
        required: true
        type: string
      slackChannel:
        required: false
        type: string
      sentryOrg:
        required: false
        type: string
      sentryProject:
        required: false
        type: string
    secrets:
      githubToken:
        required: true
      ansibleVaultPassword:
        required: true
      automateDeploySshKey:
        required: true
      sentryProjectDsn:
        required: false
      sentryAuthToken:
        required: false
      e2eUserLogin:
        required: false
      e2eUserPassword:
        required: false
      lexiApiKey:
        required: false
      slackWebhookUrl:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !github.ref_protected }}

env:
  # Deployment
  ANSIBLE_VAULT_PASSWORD: ${{ secrets.ansibleVaultPassword }}
  # Sentry
  REACT_APP_SENTRY_DSN: ${{ secrets.sentryProjectDsn }}
  REACT_APP_SENTRY_RELEASE_VERSION: ${{ github.sha }}
  SENTRY_ORG: ${{ inputs.sentryOrg }}
  SENTRY_PROJECT: ${{ inputs.sentryProject }}
  SENTRY_AUTH_TOKEN: ${{ secrets.sentryAuthToken }}
  # E2E tests
  CYPRESS_E2E_USER_LOGIN: ${{ secrets.e2eUserLogin }}
  CYPRESS_E2E_USER_PASSWORD: ${{ secrets.e2eUserPassword }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodeVersion }}
          check-latest: true
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@adjust'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.githubToken }}

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Build preview
        if: github.event_name == 'pull_request'
        run: npm run build
        env:
          REACT_APP_SENTRY_ENVIRONMENT: preview

      - name: Build staging
        if: endsWith(github.ref, 'heads/staging')
        run: npm run build
        env:
          REACT_APP_SENTRY_ENVIRONMENT: staging

      - name: Build production
        if: endsWith(github.ref, 'heads/production')
        run: npm run build
        env:
          REACT_APP_RELEASE_ENV: production
          REACT_APP_SENTRY_ENVIRONMENT: production

      - name: Validate translations
        run: npm run intl:validate

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build
          retention-days: 3

      - name: Archive translation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extractedTranslations
          path: extractedTranslations
          retention-days: 3

  deploy_preview:
    name: Deploy to preview environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false && github.event.pull_request.closed == false

    steps:
      - name: Clone ansible
        uses: actions/checkout@v3
        with:
          repository: adjust/cc-ansible
          token: ${{ secrets.githubToken }}

      - name: Read known_hosts.txt
        id: known_hosts
        uses: andstor/file-reader-action@v1
        with:
          path: 'known_hosts.txt'

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.automateDeploySshKey }}
          known_hosts: ${{ steps.known_hosts.outputs.contents }}
          config: |
            Host *.adjust.com
              User acquired

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: env.REACT_APP_SENTRY_DSN != null
        with:
          environment: preview
          sourcemaps: './build/static/js'
          url_prefix: '~/static/js'
          set_commits: skip
          version: ${{ env.REACT_APP_SENTRY_RELEASE_VERSION }}

      - name: Deploy
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i staging playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=datascape/${{ inputs.appFolder }} main_dir={{ user_home }}/mfe/${{ inputs.appFolder }} app_name=${{ inputs.appName }} branch=${{env.GITHUB_HEAD_REF_SLUG_URL}}"

      - name: Share preview link in PR comments
        uses: mshick/add-pr-comment@v1
        with:
          message: 'Check the deployed **micro-application** [preview](https://${{env.GITHUB_HEAD_REF_SLUG_URL}}.preview.adjust.com${{ inputs.appPath }})!ðŸš€'
          repo-token: ${{ secrets.githubToken }}

  e2e_preview:
    name: Run E2E tests on preview environment
    runs-on: ubuntu-latest
    needs: [deploy_preview]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Run E2E on Preview
        if: github.event_name == 'pull_request'
        uses: cypress-io/github-action@v3.2.0
        with:
          # BaseUrl is generated dynamically per each PR, all cypress config is in e2e/ci.json
          config: baseUrl=https://${{env.GITHUB_HEAD_REF_SLUG_URL}}.preview.adjust.com/datascape
          config-file: e2e/ci.json

  deploy_staging:
    name: Deploy to staging environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: endsWith(github.ref, 'heads/staging')

    steps:
      - name: Clone ansible
        uses: actions/checkout@v3
        with:
          repository: adjust/cc-ansible
          token: ${{ secrets.githubToken }}

      - name: Read known_hosts.txt
        id: known_hosts
        uses: andstor/file-reader-action@v1
        with:
          path: 'known_hosts.txt'

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.automateDeploySshKey }}
          known_hosts: ${{ steps.known_hosts.outputs.contents }}
          config: |
            Host *.adjust.com
              User acquired

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: env.REACT_APP_SENTRY_DSN != null
        with:
          environment: staging
          sourcemaps: './build/static/js'
          url_prefix: '~/static/js'
          set_commits: skip
          version: ${{ env.REACT_APP_SENTRY_RELEASE_VERSION }}

      - name: Deploy
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i staging playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=datascape/${{ inputs.appFolder }} main_dir={{ user_home }}/mfe/${{ inputs.appFolder }} app_name=${{ inputs.appName }}"

  e2e_staging:
    name: Run E2E tests on staging environment
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    if: endsWith(github.ref, 'heads/staging')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Run E2E on Staging
        if: endsWith(github.ref, 'heads/staging')
        uses: cypress-io/github-action@v3.2.0
        with:
          config-file: e2e/ci.json

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != null && failure()
        uses: adjust/github-actions-slack@v1.2.5
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slackWebhookUrl }}
        with:
          channel: ${{ inputs.slackChannel}}
          status: ${{ job.status }}
          repo: ${{ github.event.inputs.repo }}
          user: ${{ github.event.inputs.user }}
          run_id: ${{ github.event.inputs.run_id }}

  deploy_production:
    name: Deploy to production and demo environments
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: endsWith(github.ref, 'heads/production')

    steps:
      - name: Clone ansible
        uses: actions/checkout@v3
        with:
          repository: adjust/cc-ansible
          token: ${{ secrets.githubToken }}

      - name: Read known_hosts.txt
        id: known_hosts
        uses: andstor/file-reader-action@v1
        with:
          path: 'known_hosts.txt'

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.automateDeploySshKey }}
          known_hosts: ${{ steps.known_hosts.outputs.contents }}
          config: |
            Host *.adjust.com
              User acquired

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: env.REACT_APP_SENTRY_DSN != null
        with:
          environment: production
          sourcemaps: './build/static/js'
          url_prefix: '~/static/js'
          set_commits: skip
          version: ${{ env.REACT_APP_SENTRY_RELEASE_VERSION }}

      - name: 'Deploy: production'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i production playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=datascape/${{ inputs.appFolder }} main_dir={{ user_home }}/mfe/${{ inputs.appFolder }} app_name=${{ inputs.appName }}"

      - name: 'Deploy: demo'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i demo playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=datascape/${{ inputs.appFolder }} main_dir={{ user_home }}/mfe/${{ inputs.appFolder }} app_name=${{ inputs.appName }}"

  push_translations:
    name: Push translations to Lexi
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build]
    if: endsWith(github.ref, 'heads/staging')

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodeVersion }}
          check-latest: true
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@adjust'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.githubToken }}

      - name: Download translation artifacts
        uses: actions/download-artifact@v3
        with:
          name: extractedTranslations
          path: extractedTranslations

      - name: Push translations
        run: npm run intl:push
        if: env.LEXI_API_KEY != null
        env:
          LEXI_API_KEY: ${{ secrets.lexiApiKey }}
