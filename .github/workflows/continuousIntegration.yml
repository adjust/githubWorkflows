name: Continuous Integration

on:
  workflow_call:
    inputs:
      node_version:
        required: true
        type: string
      app_path:
        required: true
        type: string
      app_location:
        required: false
        type: string
        default: ""
      app_main_dir:
        required: true
        type: string
      app_name:
        required: true
        type: string
      slack_channel:
        required: false
        type: string
      sentry_org:
        required: false
        type: string
      sentry_project:
        required: false
        type: string
      e2e_runner:
        required: false
        type: string
        description: 'There are 3 supports values. No value disables E2E. "sh" runs "e2e/run.sh". "npm" runs "npm run test:e2e"'
        default: ""
    secrets:
      github_access_token:
        required: true
      ansible_vault_password:
        required: true
      ssh_key:
        required: true
      sentry_project_dsn:
        required: false
      sentry_auth_token:
        required: false
      e2e_user_login:
        required: false
      e2e_user_password:
        required: false
      lexi_api_key:
        required: false
      e2e_slack_webhook_url:
        required: false
      slack_webhook_url:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !github.ref_protected }}

env:
  # Deployment
  ANSIBLE_VAULT_PASSWORD: ${{ secrets.ansible_vault_password }}
  # Sentry
  REACT_APP_SENTRY_DSN: ${{ secrets.sentry_project_dsn }}
  REACT_APP_SENTRY_RELEASE_VERSION: ${{ github.sha }}
  SENTRY_ORG: ${{ inputs.sentry_org }}
  SENTRY_PROJECT: ${{ inputs.sentry_project }}
  SENTRY_AUTH_TOKEN: ${{ secrets.sentry_auth_token }}
  ADJUST_GITHUB_NPM_TOKEN: ${{ secrets.github_access_token }}

jobs:
  configure_variables:
    name: Configure Variables
    runs-on: ubuntu-latest
    outputs:
      app_location: ${{ steps.set_app_location.outputs.app_location }}
      lexi_enabled: ${{ steps.detect_lexi.outputs.lexi_enabled }}
      sentry_enabled: ${{ steps.detect_sentry.outputs.sentry_enabled }}
      slack_enabled: ${{ steps.detect_slack.outputs.slack_enabled }}
      e2e_slack_enabled: ${{ steps.detect_e2e_slack.outputs.e2e_slack_enabled }}
    steps:
      - name: Set app location
        id: set_app_location
        run: echo "::set-output name=app_location::datascape${{ inputs.app_location && '/' || '' }}${{ inputs.app_location }}"
      - name: Detect Lexi
        id: detect_lexi
        if: "${{ env.LEXI_API_KEY != '' }}"
        run: echo "::set-output name=lexi_enabled::true"
        env:
          LEXI_API_KEY: ${{ secrets.lexi_api_key }}
      - name: Detect Sentry
        id: detect_sentry
        if: "${{ env.SENTRY_PROJECT_DSN != '' }}"
        run: echo "::set-output name=sentry_enabled::true"
        env:
          SENTRY_PROJECT_DSN: ${{ secrets.sentry_project_dsn }}
      - name: Detect Slack
        id: detect_slack
        if: "${{ env.SLACK_WEBHOOK_URL != '' }}"
        run: echo "::set-output name=slack_enabled::true"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}
      - name: Detect E2E Slack
        id: detect_e2e_slack
        if: "${{ env.E2E_SLACK_WEBHOOK_URL != '' }}"
        run: echo "::set-output name=e2e_slack_enabled::true"
        env:
          E2E_SLACK_WEBHOOK_URL: ${{ secrets.e2e_slack_webhook_url }}

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [configure_variables]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          check-latest: true
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: "@adjust"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.github_access_token }}

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Build preview
        if: github.event_name == 'pull_request'
        run: npm run build
        env:
          REACT_APP_RELEASE_ENV: preview
          REACT_APP_API_DOMAIN: https://api-qa-2.adjust.com
          REACT_APP_DASHBOARD_API_DOMAIN: https://dash-qa-2.adjust.com

      - name: Build staging
        if: endsWith(github.ref, 'heads/staging')
        run: npm run build
        env:
          REACT_APP_SENTRY_ENVIRONMENT: staging
          REACT_APP_RELEASE_ENV: staging
          REACT_APP_API_DOMAIN: https://api-qa-2.adjust.com
          REACT_APP_DASHBOARD_API_DOMAIN: https://dash-qa-2.adjust.com

      - name: Build production
        if: endsWith(github.ref, 'heads/production')
        run: npm run build
        env:
          REACT_APP_RELEASE_ENV: production
          REACT_APP_SENTRY_ENVIRONMENT: production

      - name: Validate translations
        if: needs.configure_variables.outputs.lexi_enabled == 'true'
        run: npm run intl:validate

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build
          retention-days: 3

      - name: Archive translation artifacts
        if: needs.configure_variables.outputs.lexi_enabled == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: extractedTranslations
          path: extractedTranslations
          retention-days: 3

  deploy_preview:
    name: Deploy to preview environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, configure_variables]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false && github.event.pull_request.closed == false

    steps:
      - name: Clone ansible
        uses: actions/checkout@v3
        with:
          repository: adjust/cc-ansible
          token: ${{ secrets.github_access_token }}

      - name: Read known_hosts.txt
        id: known_hosts
        uses: andstor/file-reader-action@v1
        with:
          path: "known_hosts.txt"

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.ssh_key }}
          known_hosts: ${{ steps.known_hosts.outputs.contents }}
          config: |
            Host *.adjust.com
              User acquired

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Deploy
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i staging playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=${{ needs.configure_variables.outputs.app_location }} main_dir={{ user_home }}/mfe/${{ inputs.app_main_dir }} app_name=${{ inputs.app_name }} branch=${{env.GITHUB_HEAD_REF_SLUG_URL}}"

      - name: Share preview link in PR comments
        uses: mshick/add-pr-comment@v1
        with:
          message: "Check the deployed **micro-application** [preview](https://${{env.GITHUB_HEAD_REF_SLUG_URL}}.preview.adjust.com${{ inputs.app_path }})!ðŸš€"
          repo-token: ${{ secrets.github_access_token }}

  e2e_preview:
    name: Run E2E tests on preview environment
    runs-on: ubuntu-latest
    needs: [deploy_preview]
    if: ${{ github.event_name == 'pull_request' && inputs.e2e_runner != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Run E2E on Preview
        if: ${{ github.event_name == 'pull_request' && inputs.e2e_runner == 'npm'}}
        uses: cypress-io/github-action@v3.2.0
        env:
          CYPRESS_E2E_USER_LOGIN: ${{ secrets.e2e_user_login }}
          CYPRESS_E2E_USER_PASSWORD: ${{ secrets.e2e_user_password }}
        with:
          # BaseUrl is generated dynamically per each PR, all cypress config is in e2e/ci.json
          config: baseUrl=https://${{env.GITHUB_HEAD_REF_SLUG_URL}}.preview.adjust.com/datascape
          config-file: e2e/ci.json

      - name: Run E2E on Preview
        if: ${{ github.event_name == 'pull_request' && inputs.e2e_runner == 'sh'}}
        run: |
          cd e2e
          chmod +x ./run.sh
          ./run.sh ${{ secrets.e2e_user_login }} ${{ secrets.e2e_user_password }} https://${{ env.GITHUB_HEAD_REF_SLUG_URL }}.preview.adjust.com/datascape

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test Results
          path: |
            e2e/results

  deploy_staging:
    name: Deploy to staging environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, configure_variables]
    if: endsWith(github.ref, 'heads/staging')

    steps:
      - name: Clone ansible
        uses: actions/checkout@v3
        with:
          repository: adjust/cc-ansible
          token: ${{ secrets.github_access_token }}

      - name: Read known_hosts.txt
        id: known_hosts
        uses: andstor/file-reader-action@v1
        with:
          path: "known_hosts.txt"

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.ssh_key }}
          known_hosts: ${{ steps.known_hosts.outputs.contents }}
          config: |
            Host *.adjust.com
              User acquired

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: needs.configure_variables.outputs.sentry_enabled == 'true'
        with:
          environment: staging
          sourcemaps: "./build/static/js"
          url_prefix: "~/static/js"
          set_commits: skip
          version: ${{ env.REACT_APP_SENTRY_RELEASE_VERSION }}

      - name: Deploy
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i staging playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=${{ needs.configure_variables.outputs.app_location }} main_dir={{ user_home }}/mfe/${{ inputs.app_main_dir }} app_name=${{ inputs.app_name }}"

      - name: Slack notification
        if: ${{ always() && needs.configure_variables.outputs.slack_enabled == 'true' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}
        uses: adjust/github-actions-slack@v1.2.5
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}

  e2e_staging:
    name: Run E2E tests on staging environment
    runs-on: ubuntu-latest
    needs: [deploy_staging, configure_variables]
    if: ${{ endsWith(github.ref, 'heads/staging') && inputs.e2e_runner != ''}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Run E2E on Staging
        if: ${{ endsWith(github.ref, 'heads/staging') && inputs.e2e_runner == 'npm' }}
        uses: cypress-io/github-action@v3.2.0
        env:
          CYPRESS_E2E_USER_LOGIN: ${{ secrets.e2e_user_login }}
          CYPRESS_E2E_USER_PASSWORD: ${{ secrets.e2e_user_password }}
        with:
          config-file: e2e/ci.json

      - name: Run E2E on Staging
        if: ${{endsWith(github.ref, 'heads/staging') && inputs.e2e_runner == 'sh'}}
        run: |
          cd e2e
          chmod +x ./run.sh
          ./run.sh ${{ secrets.e2e_user_login }} ${{ secrets.e2e_user_password }} https://dash-qa-2.adjust.com/datascape

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test Results
          path: |
            e2e/results

      - name: Send Slack notification
        if: ${{ failure() && needs.configure_variables.outputs.e2e_slack_enabled == 'true' }}
        uses: adjust/github-actions-slack@v1.2.5
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.e2e_slack_webhook_url }}
        with:
          channel: ${{ inputs.slack_channel}}
          status: ${{ job.status }}
          repo: ${{ github.event.inputs.repo }}
          user: ${{ github.event.inputs.user }}
          run_id: ${{ github.event.inputs.run_id }}

  deploy_production:
    name: Deploy to production and demo environments
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, configure_variables]
    if: endsWith(github.ref, 'heads/production')

    steps:
      - name: Clone ansible
        uses: actions/checkout@v3
        with:
          repository: adjust/cc-ansible
          token: ${{ secrets.github_access_token }}

      - name: Read known_hosts.txt
        id: known_hosts
        uses: andstor/file-reader-action@v1
        with:
          path: "known_hosts.txt"

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.3.1
        with:
          key: ${{ secrets.ssh_key }}
          known_hosts: ${{ steps.known_hosts.outputs.contents }}
          config: |
            Host *.adjust.com
              User acquired

      - name: Add slugs to env
        uses: rlespinasse/github-slug-action@3.6.0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: needs.configure_variables.outputs.sentry_enabled == 'true'
        with:
          environment: production
          sourcemaps: "./build/static/js"
          url_prefix: "~/static/js"
          set_commits: skip
          version: ${{ env.REACT_APP_SENTRY_RELEASE_VERSION }}

      - name: "Deploy: production"
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i production playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=${{ needs.configure_variables.outputs.app_location }} main_dir={{ user_home }}/mfe/${{ inputs.app_main_dir }} app_name=${{ inputs.app_name }}"

      - name: "Deploy: demo"
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: timeout
          command: ansible-playbook -i demo playbooks/frontend/mfe.yml --extra-vars "source_dir=../../build location=${{ needs.configure_variables.outputs.app_location }} main_dir={{ user_home }}/mfe/${{ inputs.app_main_dir }} app_name=${{ inputs.app_name }}"

      - name: "Create Git tag for the release"
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor

      - name: "Create a GitHub release based on the new Git tag"
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release v${{ steps.tag_version.outputs.new_version }}
          generateReleaseNotes: true

      - name: Slack notification
        if: ${{ always() && needs.configure_variables.outputs.slack_enabled == 'true' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}
        uses: adjust/github-actions-slack@v1.2.5
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}

  push_translations:
    name: Push translations to Lexi
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build, configure_variables]
    if: ${{ endsWith(github.ref, 'heads/staging') && needs.configure_variables.outputs.lexi_enabled == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          check-latest: true
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: "@adjust"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.github_access_token }}

      - name: Download translation artifacts
        uses: actions/download-artifact@v3
        with:
          name: extractedTranslations
          path: extractedTranslations

      - name: Push translations
        run: npm run intl:push
        env:
          LEXI_API_KEY: ${{ secrets.lexi_api_key }}
