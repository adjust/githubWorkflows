name: buildScanPush

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tag:
        default: "latest"
        type: string
      repository:
        required: true
        type: string
      build_args:
        default: ""
        type: string
      region:
        required: true
        type: string
      dockerfile_path:
        default: "."
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    # outputs:
    #   image_url:
    #     description: Image url
    #     value: ${{ jobs.build.outputs.image_url }}

jobs:
  build:
    name: Build scan and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          mask-aws-account-id: false
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Prepare the image name and tag
        run: |
          echo "image_url=${{ inputs.repository }}/${{ inputs.image_name }}:${{ inputs.tag }}" >> $GITHUB_ENV
          # echo "::set-output name=image_url::$image_url"

      - name: Build the Docker image
        run: |
          if [ -z ${{ inputs.build_args }} ]
          then
            BUILD_ARGS=""
          else
            BUILD_ARGS=`echo ${{ inputs.build_args }} | sed -e 's/[ ]/ --build-args /g' | sed -e 's/^/--build-args /'`
          fi
          docker build --file ${{ inputs.dockerfile_path }} --tag ${{ env.image_url }} ${BUILD_ARGS}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.image_url }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Push tag to AWS ECR
        run: |
          docker push ${{ env.image_url }}
