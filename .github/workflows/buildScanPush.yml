name: buildScanPush

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tags:
        default: ""
        type: string
      repository:
        required: true
        type: string
      # build_args:
      #   default: ""
      #   type: string
      region:
        required: true
        type: string
      dockerfile_path:
        default: "."
        type: string
      exit_on_scan_fail:
        default: 0
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      build_args:
        
jobs:
  buildScanPush:
    name: Build scan and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          mask-aws-account-id: false
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref }}

      - name: Extract docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ inputs.repository }}/${{ inputs.image_name}}
          # Generate tags
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=raw,${{ inputs.tags }}

      - name: Build locally before tests and scan
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.dockerfile_path }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ secrets.build_args }}

      - id: get-first-tag
        name: Get tag for scan
        run: |
          first_tag=$(echo "${{steps.meta.outputs.tags}}" | cut -d$'\n' -f1)
          echo "::set-output name=first_tag::$first_tag"

      # Trivy vulnerability scan
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-first-tag.outputs.first_tag }}
          format: "table"
          exit-code: ${{ inputs.exit_on_scan_fail }}
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ secrets.build_args }}
