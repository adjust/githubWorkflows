name: buildScanPush

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      tags:
        description: "Image tags, in case of multiple tags use string demlimited by \n eg: test1\ntest2"
        default: ""
        type: string
      registry:
        description: "Container image registry, eg: 1234567789012.dkr.ecr.eu-central-1.amazonaws.com"
        required: true
        type: string
      build_args:
        description: "Build args, in case of multiple tags use string demlimited by \n eg: arg0=val1,val2\narg1=test1\narg2=test2"
        default: ""
        type: string
      dockerfile_path:
        default: "."
        type: string
      exit_on_scan_fail:
        description: "Flag to abort push to registry if security scan has CRITICAL flaws"
        default: 0
        type: string
    secrets:
      CONTAINER_REGISTRY_USER:
        required: true
      CONTAINER_REGISTRY_PASSWORD:
        required: true
      SSH_KEY:
        required: false
        
jobs:
  buildScanPush:
    name: Build scan and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: get SSH key
        id : sshKey
        run: echo '::set-output name=secret::${{secrets.SSH_KEY}}'


      - name: Setup SSH Auth Sock
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ steps.sshKey.outputs.sshKey }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}

      - name: Extract docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ inputs.registry }}/${{ inputs.image_name}}
          # Generate tags
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=raw,${{ inputs.tags }}

      - name: Build locally before tests and scan
        uses: docker/build-push-action@v2
        with:
          ssh: |
            "default=${{ env.SSH_AUTH_SOCK || '' }}"
          context: ${{ inputs.dockerfile_path }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: "GITHUB_TOKEN=${{ secrets.TEAM_GITHUB_TOKEN }}\n${{ inputs.build_args }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - id: get-first-tag
        name: Get tag for scan
        run: |
          first_tag=$(echo "${{steps.meta.outputs.tags}}" | cut -d$'\n' -f1)
          echo "::set-output name=first_tag::$first_tag"

      # Trivy vulnerability scan
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-first-tag.outputs.first_tag }}
          format: "table"
          exit-code: ${{ inputs.exit_on_scan_fail }}
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          ssh: |
            "default=${{ env.SSH_AUTH_SOCK || '' }}"
          context: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: "${{ inputs.build_args }}"
